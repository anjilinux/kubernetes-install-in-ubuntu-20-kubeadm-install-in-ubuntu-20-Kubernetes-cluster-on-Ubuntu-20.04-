https://computingforgeeks.com/deploy-kubernetes-cluster-on-ubuntu-with-kubeadm/#comments
Install Kubernetes Cluster on Ubuntu 20.04 with kubeadm  with container RUNTIME INTERFACE CONTAINERD  TYPE
Container Runtimes  CONTAINERD WITH K8-CLUSTER  SUCCESS 

    containerd    =====================  NOW  USE
    CRI-O     
    Docker Engine
    Mirantis Container Runtime

How to Deploy Kubernetes with the   containerd Container Runtime
https://computingforgeeks.com/deploy-kubernetes-cluster-on-ubuntu-with-kubeadm/#comments
Install Kubernetes Cluster on Ubuntu 20.04 with kubeadm    =  NOTE: You have to choose one runtime at a time.=CRI-O
NOTE: You have to choose one runtime      "Container runtime containerd 
-----------------------------------------
sudo apt update
sudo apt -y full-upgrade
[ -f /var/run/reboot-required ] && sudo reboot -f  
---------------------------------------------------------
sudo apt -y install curl apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
-------------------------------------
sudo apt update
sudo apt -y install vim git curl wget kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
------------------------------------####################
an@lan:~$  kubectl version --client && kubeadm version

WARNING: This version information is deprecated and will be replaced with the output from kubectl version --short.  Use --output=yaml|json to get the full version.
Client Version: version.Info{Major:"1", Minor:"27", GitVersion:"v1.27.1", GitCommit:"4c9411232e10168d7b050c49a1b59f6df9d7ea4b", GitTreeState:"clean", BuildDate:"2023-04-14T13:21:19Z", GoVersion:"go1.20.3", Compiler:"gc", Platform:"linux/amd64"}
Kustomize Version: v5.0.1
kubeadm version: &version.Info{Major:"1", Minor:"27", GitVersion:"v1.27.1", GitCommit:"4c9411232e10168d7b050c49a1b59f6df9d7ea4b", GitTreeState:"clean", BuildDate:"2023-04-14T13:20:04Z", GoVersion:"go1.20.3", Compiler:"gc", Platform:"linux/amd64"}
-----------------------
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sudo swapoff -a
sudo mount -a
free -h
-----------------------------------
sudo modprobe overlay
sudo modprobe br_netfilter
------------------------------
sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system
++++--------------------  ###########################\/\/\/\/\/  Installing Containerd: 
NOTE: You have to choose one runtime at a time.     ====  Containerd 

sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
--------------------
sudo modprobe overlay
sudo modprobe br_netfilter
---------------------
sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system
-------------------------------
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
-------------------------
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
---------------------------
sudo apt update
sudo apt install -y containerd.io
-----------------------
sudo su -
mkdir -p /etc/containerd
containerd config default>/etc/containerd/config.toml
---------------------------------------------------------
sudo systemctl restart containerd
sudo systemctl enable containerd
systemctl status  containerd
---------------------------------
 lsmod | grep br_netfilter
sudo systemctl enable kubelet
========================================
 ------------------------------------###############################  SMALL-STEPS-TEST CLUSTER WORKING OR NOT
sudo kubeadm config images pull      OR OR  OR 

root@lan:~# cd /run/containerd/
root@lan:/run/containerd# pwd
/run/containerd
root@lan:/run/containerd# ll
total 0
drwx--x--x  4 root root 120 May 10 14:15 ./
drwxr-xr-x 35 root root 940 May 10 14:14 ../
srw-rw----  1 root root   0 May 10 14:15 containerd.sock=
srw-rw----  1 root root   0 May 10 14:15 containerd.sock.ttrpc=
drwx--x--x  2 root root  40 May 10 14:14 io.containerd.runtime.v1.linux/
drwx--x--x  2 root root  40 May 10 14:14 io.containerd.runtime.v2.task/

sudo kubeadm config images pull --cri-socket unix:///run/containerd/containerd.sock
root@lan:/run/containerd# sudo kubeadm config images pull --cri-socket unix:///run/containerd/containerd.sock
W0510 14:39:45.301184    9756 images.go:80] could not find officially supported version of etcd for Kubernetes v1.27.1, falling back to the nearest etcd version (3.5.7-0)
[config/images] Pulled registry.k8s.io/kube-apiserver:v1.27.1
[config/images] Pulled registry.k8s.io/kube-controller-manager:v1.27.1
[config/images] Pulled registry.k8s.io/kube-scheduler:v1.27.1
[config/images] Pulled registry.k8s.io/kube-proxy:v1.27.1
[config/images] Pulled registry.k8s.io/pause:3.9
[config/images] Pulled registry.k8s.io/etcd:3.5.7-0
[config/images] Pulled registry.k8s.io/coredns/coredns:v1.10.1

\/\/\/\/\/\/  OR  OR  OR  DIRECT SINGLE STEP AT A TIME LONG PROCESS  ################################  OR  OR  OR 

"Bootstrap without" shared endpoint   To bootstrap a cluster without using DNS endpoint, run:

sudo kubeadm init \
  --pod-network-cidr=192.168.0.0/16 \
  --cri-socket unix:///run/containerd/containerd.sock

    "  OR   OR   OR  OR  EXTAR FEATURE 
 ========  OR  OR  =  "Bootstrap with" shared endpoint (DNS name for control plane API)  ###############333
 Set cluster endpoint DNS name or add record to /etc/hosts file"
root@lan:~# cat  /etc/hosts
127.0.0.1	localhost
127.0.1.1	lan
192.168.122.61     www.aws.devops.cicd.com

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet

    sudo kubeadm init \
  --pod-network-cidr=192.168.0.0/16 \
  --upload-certs \
  --control-plane-endpoint=www.aws.devops.cicd.com

  ##### BUT TIME SAVE === =   

NOTE = allready ready  SCOCKET-FILE AT LOCATION = run/containerd/containerd.sock
  
  sudo kubeadm init \
  --pod-network-cidr=192.168.0.0/16 \
  --cri-socket unix:///run/containerd/containerd.sock \
  --upload-certs \
  --control-plane-endpoint=www.aws.devops.cicd.com

 root@lan:~#   sudo kubeadm init \
>   --pod-network-cidr=192.168.0.0/16 \
>   --cri-socket unix:///run/containerd/containerd.sock \
>   --upload-certs \
>   --control-plane-endpoint=www.aws.devops.cicd.com
[init] Using Kubernetes version: v1.27.1
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
W0510 14:51:45.738608   10266 images.go:80] could not find officially supported version of etcd for Kubernetes v1.27.1, falling back to the nearest etcd version (3.5.7-0)
W0510 14:51:45.831723   10266 checks.go:835] detected that the sandbox image "registry.k8s.io/pause:3.6" of the container runtime is inconsistent with that used by kubeadm. It is recommended that using "registry.k8s.io/pause:3.9" as the CRI sandbox image.
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local lan www.aws.devops.cicd.com] and IPs [10.96.0.1 192.168.122.61]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [lan localhost] and IPs [192.168.122.61 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [lan localhost] and IPs [192.168.122.61 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
W0510 14:51:47.948296   10266 images.go:80] could not find officially supported version of etcd for Kubernetes v1.27.1, falling back to the nearest etcd version (3.5.7-0)
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 9.005234 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Storing the certificates in Secret "kubeadm-certs" in the "kube-system" Namespace
[upload-certs] Using certificate key:
54088de96020233d885f88b38c4488e0c11369700a480ab991e24518775f02be
[mark-control-plane] Marking the node lan as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node lan as control-plane by adding the taints [node-role.kubernetes.io/control-plane:NoSchedule]
[bootstrap-token] Using token: ayvq29.fbxurgdd5xgg9w1f
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of the control-plane node running the following command on each as root:

  kubeadm join www.aws.devops.cicd.com:6443 --token ayvq29.fbxurgdd5xgg9w1f \
	--discovery-token-ca-cert-hash sha256:456d8d6b3399c0f3a797c52452f145e12f15a486d418e32750ffef3885c04c99 \
	--control-plane --certificate-key 54088de96020233d885f88b38c4488e0c11369700a480ab991e24518775f02be

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
"kubeadm init phase upload-certs --upload-certs" to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join www.aws.devops.cicd.com:6443 --token ayvq29.fbxurgdd5xgg9w1f \
	--discovery-token-ca-cert-hash sha256:456d8d6b3399c0f3a797c52452f145e12f15a486d418e32750ffef3885c04c99      
++++++++++++++++++++++++++++++++++++++++++++++++++++++++==
root@lan:~#  kubectl cluster-info
Kubernetes control plane is running at https://www.aws.devops.cicd.com:6443
CoreDNS is running at https://www.aws.devops.cicd.com:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
=======================
root@lan:~# kubectl get nodes -o wide --show-labels
NAME   STATUS   ROLES           AGE    VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME     LABELS
lan    Ready    control-plane   2m2s   v1.27.1   192.168.122.61   <none>        Ubuntu 20.04.6 LTS   5.15.0-71-generic   containerd://1.6.21   beta.kubernetes.io/a
